pred = list(aggregate = NA, individual = NA)#,error=error)
pred$aggregate
quantile(pred$individual)
quantile(na.omit(pred$individual))
shiny::runApp()
Data<-function(directorio){
setwd(directorio)
objetivo=read.csv2("CasoEstimacion.csv",header=TRUE,dec=",")
names(objetivo)=c(" ","FECHA","nexped","VUMERCADO","latitud","longitud","NUMBANOS","NUMDORMITO","SUPCONST","CCBU","antiguedad","DEPRECIAVV","NUMEROASCE","capa",
"SUPPARCELA","DATOSPLANT","NUMEROPLAN","EXTINT","idtramo")
if(is.na(objetivo$FECHA) | objetivo$FECHA==format(Sys.time(),"%d-%m-%Y")){
objetivo$FECHA=as.Date(paste(format(Sys.time(),"%Y-%m"),"01",sep="-"))}
if(objetivo$FECHA != format(Sys.time(),"%d-%m-%Y")){objetivo$FECHA<-as.Date(objetivo$FECHA,"%d-%m-%Y")}
X<-read.csv2("DatosMuestra.csv",header=TRUE,dec=",")
names(X)=c("FECHA","nexped","VUMERCADO","latitud","longitud","NUMBANOS","NUMDORMITO","SUPCONST","CCBU","antiguedad","DEPRECIAVV","NUMEROASCE","capa",
"SUPPARCELA","DATOSPLANT","NUMEROPLAN","idtramo","idZona","idzona","Distancia","idzonaRef","EXTINT")
X$FECHA<-as.Date(as.vector(X$FECHA),"%d-%m-%Y")
X$idtramo=ifelse(X$idtramo==1,250,ifelse(X$idtramo==10,550,ifelse(X$idtramo==20,650,ifelse(X$idtramo==30,750,
ifelse(X$idtramo==40,900,ifelse(X$idtramo==50,1100,ifelse(X$idtramo==60,1300,ifelse(X$idtramo==70,1550,
ifelse(X$idtramo==80,1850,ifelse(X$idtramo==90,2150,ifelse(X$idtramo==100,2550,ifelse(X$idtramo==110,3050,
ifelse(X$idtramo==120,3550,ifelse(X$idtramo==130,4150,ifelse(X$idtramo==140,4850,ifelse(X$idtramo==150,5200,NA))))))))))))))))
objetivo$idtramo=ifelse(objetivo$idtramo==1,250,ifelse(objetivo$idtramo==10,550,ifelse(objetivo$idtramo==20,650,ifelse(objetivo$idtramo==30,750,
ifelse(objetivo$idtramo==40,900,ifelse(objetivo$idtramo==50,1100,ifelse(objetivo$idtramo==60,1300,ifelse(objetivo$idtramo==70,1550,
ifelse(objetivo$idtramo==80,1850,ifelse(objetivo$idtramo==90,2150,ifelse(objetivo$idtramo==100,2550,ifelse(objetivo$idtramo==110,3050,
ifelse(objetivo$idtramo==120,3550,ifelse(objetivo$idtramo==130,4150,ifelse(objetivo$idtramo==140,4850,ifelse(objetivo$idtramo==150,5200,NA))))))))))))))))
X<-subset(X, X$VUMERCADO!=0 & X$antiguedad>=0 & X$DEPRECIAVV>=0 & X$NUMBAN<99 & X$NUMDORMITO<99 & X$idtramo>0 & X$NUMBANOS>=0 & X$NUMDORMITO>=0)
if(objetivo$capa==2){
X$semisot=ifelse(X$DATOSPLANT==3,1,0)
X$pbaja=ifelse(X$DATOSPLANT==5,1,0)
X$sin.ascensor=ifelse(X$NUMEROASCE==0,1,0)
X$atico=ifelse(X$DATOSPLANT==1,1,0)
INTERIOR<-X$EXTINT-1
X<-cbind(X,INTERIOR)
objetivo$semisot=ifelse(objetivo$DATOSPLANT==3,1,0)
objetivo$pbaja=ifelse(objetivo$DATOSPLANT==5,1,0)
objetivo$sin.ascensor=ifelse(objetivo$NUMEROASCE==0,1,0)
objetivo$atico=ifelse(objetivo$DATOSPLANT==1,1,0)
objetivo$INTERIOR<-objetivo$EXTINT-1
}
return(list(X=X,objetivo=objetivo))
}
setwd("C:/Users/TBG/Desktop/Modelo Innocv/Modelo web/Pluri_LO0081416")
d=Data(getwd())
d$objetivo
d$X
head(d$X)
dim(d$X)
X=d$X
C0=c(0.076762934,0.059037005,0.48211536,0.25638257,	0.125702132)
names(C0)=c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV")
C0<-t(as.matrix(C0))
day=as.Date(objetivo$FECHA,"%d-%m-%Y")
day0=day-547.5
data=subset(X,X$FECHA>=day0 & X$FECHA<day)
if(nrow(data)<30){#stop("Sin muestras")
pred = list(aggregate = NA, individual = NA)#,error=error)
return(pred)
}
objetivo=d$objetivo
C0=c(0.076762934,0.059037005,0.48211536,0.25638257,	0.125702132)
names(C0)=c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV")
C0<-t(as.matrix(C0))
day=as.Date(objetivo$FECHA,"%d-%m-%Y")
day0=day-547.5
data=subset(X,X$FECHA>=day0 & X$FECHA<day)
head(data)
dim(data)
if(nrow(data)<30){#stop("Sin muestras")
pred = list(aggregate = NA, individual = NA)#,error=error)
return(pred)
}
setwd("C:/Users/TBG/Desktop/Modelo Innocv/Modelo web/Pluri_ZA0028616")
d=Data(getwd())
setwd("C:/Users/TBG/Desktop/Modelo Innocv/Modelo web/Pluri_ZA0028616")
d=Data(getwd())
setwd("C:/Users/TBG/Desktop/Modelo Innocv/Modelo web")
d=Data(getwd())
head(d$X)
X=d$X
objetivo=d$objetivo
dim(X)
day=as.Date(objetivo$FECHA,"%d-%m-%Y")
day0=day-547.5
data=subset(X,X$FECHA>=day0 & X$FECHA<day)
dim(data)
head(data)
data2=data
tr<-subset(data2,select=c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV"))
tr$NUMBANOS<-log(tr$NUMBANOS+1)
tr$SUPPARCELA<-log(tr$SUPPARCELA+2)
tr$SUPCONST<-log(tr$SUPCONST)
tr$CCBU<-log(tr$CCBU)
tr$DEPRECIAVV<-log(tr$DEPRECIAVV+1)
dim(data2)
Obj=objetivo
obj.com<-Obj
dim(data2)
head(data2)
head(data)
dim(tr)
C0=c(0.076762934,0.059037005,0.48211536,0.25638257,	0.125702132)
names(C0)=c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV")
C0<-t(as.matrix(C0))
obj<-subset(obj.com,select=c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV"))
obj$NUMBANOS<-log(obj$NUMBANOS+1)
obj$SUPPARCELA<-log(obj$SUPPARCELA+1)
obj$SUPCONST<-log(obj$SUPCONST)
obj$CCBU<-log(obj$CCBU)
obj$DEPRECIAVV<-log(obj$DEPRECIAVV+1)
names.obj=names(apply(obj,2,is.na))[apply(obj,2,is.na)==FALSE]
obj=obj[, colSums(is.na(obj)) != nrow(obj)]
####### EN PRUEBAS ##########
obj=as.data.frame(obj)
names(obj)=names.obj
#############################
tr<-subset(tr,select=c(names(obj)[names(obj)%in%c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV")]))
#### if(ncol(tr)==0){....} if(ncol(tr)>0){
#### rangos
R=apply(tr,2,"range")
r=c()
for(k in 1:ncol(R)){
if(R[1,k]==R[2,k]){r[k]=1}
else{r[k]=R[2,k]-R[1,k]}
}
C0=subset(C0,select=names(tr))
OBJ<-matrix(as.numeric(rep(obj,nrow(tr))),ncol=ncol(tr),byrow=TRUE)
names(OBJ)=names(tr)
dif=tr-OBJ
dif_r=sweep(dif, 2, r, "/")
dif_r2=dif_r^2
d<-sweep(dif_r2, 2, C0, "*")
dist<-rowSums(d)
TR<-cbind(data2,dist)
if(all(dist==mean(dist))){TR=data2[1:30,]}
if(!all(dist==mean(dist))){
TR=TR[order(TR$dist),]
TR=TR[1:30,]
}
dim(TR)
head(TR)
Obj
Obj2=Obj[,-c(1:4,13:14,16:18)]
Obj2
Objetive=Obj[, colSums(is.na(Obj)) != nrow(Obj)]
Objetive=Obj2[, colSums(is.na(Obj2)) != nrow(Obj2)]
Objetive
TR2<-TR[,c("VUMERCADO",names(Objetive))]
head(TR2)
TR=TR2
head(TR)
set.seed(1)
tree<-tuneRF(TR[,-1],TR$VUMERCADO,stepFactor=1.5, improve=1e-5, ntree=500,doBest=TRUE,trace = FALSE,nodesize=round(0.01*nrow(TR)),plot=FALSE)
library(randomForest)
head(TR)
set.seed(1)
tree<-tuneRF(TR[,-1],TR$VUMERCADO,stepFactor=1.5, improve=1e-5, ntree=500,doBest=TRUE,trace = FALSE,nodesize=round(0.01*nrow(TR)),plot=FALSE)
pred.obj<-predict(tree,Objetive,predict.all=TRUE)
pred.obj$aggregate
install.packages("C:/Users/TBG/Downloads/stimaRF_1.0.tar.gz", repos = NULL, type = "source")
library("stimaRF", lib.loc="C:/Program Files/R/R-3.3.3/library")
setwd("C:/Users/TBG/Desktop/Modelo Innocv/Modelo web")
datos=stimaRF::Data(getwd())
head(datos$X)
stimaRF::Estimacion(getwd())
detach("package:stimaRF", unload=TRUE)
remove.packages("stimaRF")
install.packages("C:/Users/TBG/Downloads/stimaRF_1.0.tar.gz", repos = NULL, type = "source")
library("stimaRF", lib.loc="C:/Program Files/R/R-3.3.3/library")
stimaRF::Estimacion(getwd())
detach("package:stimaRF", unload=TRUE)
data("iris")
head(iris)
tree<-tuneRF(iris[,-4:5],iris$Petal.Width,stepFactor=1.5, improve=1e-5, ntree=500,doBest=TRUE,trace = FALSE,nodesize=round(0.01*nrow(iris)),plot=FALSE)
tree<-tuneRF(iris[,-4:5],iris$Petal.Width,stepFactor=1.5, improve=1e-5, ntree=500,doBest=TRUE,trace = FALSE)
tree<-tuneRF(iris[,-c(4:5)],iris$Petal.Width,stepFactor=1.5, improve=1e-5, ntree=500,doBest=TRUE,trace = FALSE)
tree$importance
tree$coefs
tree$call
tree$localImportance
remove.packages("stimaRF")
install.packages("C:/Users/TBG/Downloads/stimaRF_1.0.tar.gz", repos = NULL, type = "source")
stimaRF::Estimacion(getwd())
remove.packages("stimaRF")
install.packages("C:/Users/TBG/Downloads/stimaRF_1.0.rar", repos = NULL)
install.packages("C:/Users/TBG/Downloads/stimaRF_1.0.tar.gz", repos = NULL, type = "source")
stimaRF::Estimacion(getwd())
d=Data(getwd())
Data<-function(directorio){
setwd(directorio)
objetivo=read.csv2("CasoEstimacion.csv",header=TRUE,dec=",")
names(objetivo)=c(" ","FECHA","nexped","VUMERCADO","latitud","longitud","NUMBANOS","NUMDORMITO","SUPCONST","CCBU","antiguedad","DEPRECIAVV","NUMEROASCE","capa",
"SUPPARCELA","DATOSPLANT","NUMEROPLAN","EXTINT","idtramo")
if(is.na(objetivo$FECHA) | objetivo$FECHA==format(Sys.time(),"%d-%m-%Y")){
objetivo$FECHA=as.Date(paste(format(Sys.time(),"%Y-%m"),"01",sep="-"))}
if(objetivo$FECHA != format(Sys.time(),"%d-%m-%Y")){objetivo$FECHA<-as.Date(objetivo$FECHA,"%d-%m-%Y")}
X<-read.csv2("DatosMuestra.csv",header=TRUE,dec=",")
names(X)=c("FECHA","nexped","VUMERCADO","latitud","longitud","NUMBANOS","NUMDORMITO","SUPCONST","CCBU","antiguedad","DEPRECIAVV","NUMEROASCE","capa",
"SUPPARCELA","DATOSPLANT","NUMEROPLAN","idtramo","idZona","idzona","Distancia","idzonaRef","EXTINT")
X$FECHA<-as.Date(as.vector(X$FECHA),"%d-%m-%Y")
X$idtramo=ifelse(X$idtramo==1,250,ifelse(X$idtramo==10,550,ifelse(X$idtramo==20,650,ifelse(X$idtramo==30,750,
ifelse(X$idtramo==40,900,ifelse(X$idtramo==50,1100,ifelse(X$idtramo==60,1300,ifelse(X$idtramo==70,1550,
ifelse(X$idtramo==80,1850,ifelse(X$idtramo==90,2150,ifelse(X$idtramo==100,2550,ifelse(X$idtramo==110,3050,
ifelse(X$idtramo==120,3550,ifelse(X$idtramo==130,4150,ifelse(X$idtramo==140,4850,ifelse(X$idtramo==150,5200,NA))))))))))))))))
objetivo$idtramo=ifelse(objetivo$idtramo==1,250,ifelse(objetivo$idtramo==10,550,ifelse(objetivo$idtramo==20,650,ifelse(objetivo$idtramo==30,750,
ifelse(objetivo$idtramo==40,900,ifelse(objetivo$idtramo==50,1100,ifelse(objetivo$idtramo==60,1300,ifelse(objetivo$idtramo==70,1550,
ifelse(objetivo$idtramo==80,1850,ifelse(objetivo$idtramo==90,2150,ifelse(objetivo$idtramo==100,2550,ifelse(objetivo$idtramo==110,3050,
ifelse(objetivo$idtramo==120,3550,ifelse(objetivo$idtramo==130,4150,ifelse(objetivo$idtramo==140,4850,ifelse(objetivo$idtramo==150,5200,NA))))))))))))))))
X<-subset(X, X$VUMERCADO!=0 & X$antiguedad>=0 & X$DEPRECIAVV>=0 & X$NUMBAN<99 & X$NUMDORMITO<99 & X$idtramo>0 & X$NUMBANOS>=0 & X$NUMDORMITO>=0)
if(objetivo$capa==2){
X$semisot=ifelse(X$DATOSPLANT==3,1,0)
X$pbaja=ifelse(X$DATOSPLANT==5,1,0)
X$sin.ascensor=ifelse(X$NUMEROASCE==0,1,0)
X$atico=ifelse(X$DATOSPLANT==1,1,0)
INTERIOR<-X$EXTINT-1
X<-cbind(X,INTERIOR)
objetivo$semisot=ifelse(objetivo$DATOSPLANT==3,1,0)
objetivo$pbaja=ifelse(objetivo$DATOSPLANT==5,1,0)
objetivo$sin.ascensor=ifelse(objetivo$NUMEROASCE==0,1,0)
objetivo$atico=ifelse(objetivo$DATOSPLANT==1,1,0)
objetivo$INTERIOR<-objetivo$EXTINT-1
}
return(list(X=X,objetivo=objetivo))
}
sapply(list.files(pattern="[.]R$", path="R/", full.names=TRUE), source)
Unifamiliar<-function(X,objetivo){
C0=c(0.076762934,0.059037005,0.48211536,0.25638257,	0.125702132)
names(C0)=c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV")
C0<-t(as.matrix(C0))
day=as.Date(objetivo$FECHA,"%d-%m-%Y")
day0=day-547.5
data=subset(X,X$FECHA>=day0 & X$FECHA<day)
if(nrow(data)<30){#stop("Sin muestras")
pred = list(aggregate = NA, individual = NA)#,error=error)
return(pred)
}
if(!all(data$idzona==data$idzonaRef)){
data2=data
tr<-subset(data2,select=c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV"))
tr$NUMBANOS<-log(tr$NUMBANOS+1)
tr$SUPPARCELA<-log(tr$SUPPARCELA+2)
tr$SUPCONST<-log(tr$SUPCONST)
tr$CCBU<-log(tr$CCBU)
tr$DEPRECIAVV<-log(tr$DEPRECIAVV+1)
### calculamos las cotas
Obj=objetivo
obj.com<-Obj
#variabs<-Obj[which(names(Obj)%in%names(C0))]
#cotas=(variabs/(1000*r))^2
#C=sum(cotas*C0)
#L=log(1/C)
### calculo distancias y obtencion testigos
obj<-subset(obj.com,select=c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV"))
obj$NUMBANOS<-log(obj$NUMBANOS+1)
obj$SUPPARCELA<-log(obj$SUPPARCELA+1)
obj$SUPCONST<-log(obj$SUPCONST)
obj$CCBU<-log(obj$CCBU)
obj$DEPRECIAVV<-log(obj$DEPRECIAVV+1)
names.obj=names(apply(obj,2,is.na))[apply(obj,2,is.na)==FALSE]
obj=obj[, colSums(is.na(obj)) != nrow(obj)]
####### EN PRUEBAS ##########
obj=as.data.frame(obj)
names(obj)=names.obj
#############################
tr<-subset(tr,select=c(names(obj)[names(obj)%in%c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV")]))
#### if(ncol(tr)==0){....} if(ncol(tr)>0){
#### rangos
R=apply(tr,2,"range")
r=c()
for(k in 1:ncol(R)){
if(R[1,k]==R[2,k]){r[k]=1}
else{r[k]=R[2,k]-R[1,k]}
}
C0=subset(C0,select=names(tr))
OBJ<-matrix(as.numeric(rep(obj,nrow(tr))),ncol=ncol(tr),byrow=TRUE)
names(OBJ)=names(tr)
dif=tr-OBJ
dif_r=sweep(dif, 2, r, "/")
dif_r2=dif_r^2
d<-sweep(dif_r2, 2, C0, "*")
dist<-rowSums(d)
TR<-cbind(data2,dist)
if(all(dist==mean(dist))){TR=data2[1:30,]}
if(!all(dist==mean(dist))){
TR=TR[order(TR$dist),]
TR=TR[1:30,]
}
Obj=Obj[,-c(1:4,13:14,16:18)]
Objetive=Obj[, colSums(is.na(Obj)) != nrow(Obj)]
TR<-TR[,c("VUMERCADO",names(Objetive))]
set.seed(1)
tree<-tuneRF(TR[,-1],TR$VUMERCADO,stepFactor=1.5, improve=1e-5, ntree=500,doBest=TRUE,trace = FALSE,nodesize=round(0.01*nrow(TR)),plot=FALSE)
print(tree$importance)
pred.obj<-predict(tree,Objetive,predict.all=TRUE)
pred = list(aggregate = pred.obj$aggregate, individual = pred.obj$individual)#,error=error)
return(pred)
}
if(nrow(data)>=30 & all(data$idzona==data$idzonaRef)){
objetivo=objetivo[,-c(1:4,13:14,16:18)]
objetivo=objetivo[, colSums(is.na(objetivo)) != nrow(objetivo)]
TR<-data[,c("VUMERCADO",names(objetivo))]
set.seed(1)
tree<-tuneRF(TR[,-1],TR$VUMERCADO,stepFactor=1.5, improve=1e-5, ntree=500,doBest=TRUE,trace = FALSE,nodesize=round(0.01*nrow(TR)),plot=FALSE)
#error=mean(abs((tree$predicted-tree$y)/tree$y))
#error=ifelse(error<=0.05,1,ifelse(error>0.05 & error<=0.1,2,ifelse(error>0.1 & error<=0.15,3,ifelse(error>0.15 & error<=0.2,4,ifelse(error>0.2,5,NA)))))
pred.obj<-predict(tree,objetivo,predict.all=TRUE)
pred = list(aggregate = pred.obj$aggregate, individual = pred.obj$individual)#,error=error)
return(pred)
}
}
d=Data()
d=Data(getwd())
X=d$X
objetivo=d$objetivo
Unifamiliar(X,objetivo)
d=Data(getwd())
X=d$X
objetivo=d$objetivo
Estimacion(getwd())
d=Data(getwd())
X=d$X
objetivo=d$objetivo
stima = Unifamiliar(X,objetivo)
Unifamiliar<-function(X,objetivo){
C0=c(0.076762934,0.059037005,0.48211536,0.25638257,	0.125702132)
names(C0)=c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV")
C0<-t(as.matrix(C0))
day=as.Date(objetivo$FECHA,"%d-%m-%Y")
day0=day-547.5
data=subset(X,X$FECHA>=day0 & X$FECHA<day)
if(nrow(data)<30){#stop("Sin muestras")
pred = list(aggregate = NA, individual = NA)#,error=error)
return(pred)
}
if(!all(data$idzona==data$idzonaRef)){
data2=data
tr<-subset(data2,select=c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV"))
tr$NUMBANOS<-log(tr$NUMBANOS+1)
tr$SUPPARCELA<-log(tr$SUPPARCELA+2)
tr$SUPCONST<-log(tr$SUPCONST)
tr$CCBU<-log(tr$CCBU)
tr$DEPRECIAVV<-log(tr$DEPRECIAVV+1)
### calculamos las cotas
Obj=objetivo
obj.com<-Obj
#variabs<-Obj[which(names(Obj)%in%names(C0))]
#cotas=(variabs/(1000*r))^2
#C=sum(cotas*C0)
#L=log(1/C)
### calculo distancias y obtencion testigos
obj<-subset(obj.com,select=c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV"))
obj$NUMBANOS<-log(obj$NUMBANOS+1)
obj$SUPPARCELA<-log(obj$SUPPARCELA+1)
obj$SUPCONST<-log(obj$SUPCONST)
obj$CCBU<-log(obj$CCBU)
obj$DEPRECIAVV<-log(obj$DEPRECIAVV+1)
names.obj=names(apply(obj,2,is.na))[apply(obj,2,is.na)==FALSE]
obj=obj[, colSums(is.na(obj)) != nrow(obj)]
####### EN PRUEBAS ##########
obj=as.data.frame(obj)
names(obj)=names.obj
#############################
tr<-subset(tr,select=c(names(obj)[names(obj)%in%c("NUMBANOS","SUPPARCELA","SUPCONST","CCBU","DEPRECIAVV")]))
#### if(ncol(tr)==0){....} if(ncol(tr)>0){
#### rangos
R=apply(tr,2,"range")
r=c()
for(k in 1:ncol(R)){
if(R[1,k]==R[2,k]){r[k]=1}
else{r[k]=R[2,k]-R[1,k]}
}
C0=subset(C0,select=names(tr))
OBJ<-matrix(as.numeric(rep(obj,nrow(tr))),ncol=ncol(tr),byrow=TRUE)
names(OBJ)=names(tr)
dif=tr-OBJ
dif_r=sweep(dif, 2, r, "/")
dif_r2=dif_r^2
d<-sweep(dif_r2, 2, C0, "*")
dist<-rowSums(d)
TR<-cbind(data2,dist)
if(all(dist==mean(dist))){TR=data2[1:30,]}
if(!all(dist==mean(dist))){
TR=TR[order(TR$dist),]
TR=TR[1:30,]
}
Obj=Obj[,-c(1:4,13:14,16:18)]
Objetive=Obj[, colSums(is.na(Obj)) != nrow(Obj)]
TR<-TR[,c("VUMERCADO",names(Objetive))]
set.seed(1)
tree<-tuneRF(TR[,-1],TR$VUMERCADO,stepFactor=1.5, improve=1e-5, ntree=500,doBest=TRUE,trace = FALSE,nodesize=round(0.01*nrow(TR)),plot=FALSE)
#error=mean(abs((tree$predicted-tree$y)/tree$y))
#error=ifelse(error<=0.05,1,ifelse(error>0.05 & error<=0.1,2,ifelse(error>0.1 & error<=0.15,3,ifelse(error>0.15 & error<=0.2,4,ifelse(error>0.2,5,NA)))))
pred.obj<-predict(tree,Objetive,predict.all=TRUE)
pred = list(aggregate = pred.obj$aggregate, individual = pred.obj$individual,imp = tree$importance)#,error=error)
return(pred)
}
if(nrow(data)>=30 & all(data$idzona==data$idzonaRef)){
objetivo=objetivo[,-c(1:4,13:14,16:18)]
objetivo=objetivo[, colSums(is.na(objetivo)) != nrow(objetivo)]
TR<-data[,c("VUMERCADO",names(objetivo))]
set.seed(1)
tree<-tuneRF(TR[,-1],TR$VUMERCADO,stepFactor=1.5, improve=1e-5, ntree=500,doBest=TRUE,trace = FALSE,nodesize=round(0.01*nrow(TR)),plot=FALSE)
#error=mean(abs((tree$predicted-tree$y)/tree$y))
#error=ifelse(error<=0.05,1,ifelse(error>0.05 & error<=0.1,2,ifelse(error>0.1 & error<=0.15,3,ifelse(error>0.15 & error<=0.2,4,ifelse(error>0.2,5,NA)))))
pred.obj<-predict(tree,objetivo,predict.all=TRUE)
pred = list(aggregate = pred.obj$aggregate, individual = pred.obj$individual)#,error=error)
return(pred)
}
}
d=Data(getwd())
X=d$X
objetivo = d$objetivo
stima = Unifamiliar(X,objetivo)
stima$imp
stima$aggregate
install.packages("C:/Users/TBG/Downloads/RExcelrpart_1.0.tar.gz", repos = NULL, type = "source")
library("RExcelrpart", lib.loc="C:/Program Files/R/R-3.3.3/library")
shiny::runApp()
