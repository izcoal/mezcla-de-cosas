{
    "collab_server" : "",
    "contents" : "Unifamiliar<-function(X,objetivo){\n  \n  C0=c(0.076762934,0.059037005,0.48211536,0.25638257,\t0.125702132)\n  names(C0)=c(\"NUMBANOS\",\"SUPPARCELA\",\"SUPCONST\",\"CCBU\",\"DEPRECIAVV\")\n  C0<-t(as.matrix(C0))\n  \n  \n  day=as.Date(objetivo$FECHA,\"%d-%m-%Y\")\n  day0=day-547.5\n  data=subset(X,X$FECHA>=day0 & X$FECHA<day)\n  \n  if(nrow(data)<30){#stop(\"Sin muestras\")\n    pred = list(aggregate = NA, individual = NA)#,error=error)\n    return(pred)\n    }\n  if(!all(data$idzona==data$idzonaRef)){\n    \n    data2=data\n    tr<-subset(data2,select=c(\"NUMBANOS\",\"SUPPARCELA\",\"SUPCONST\",\"CCBU\",\"DEPRECIAVV\"))\n    tr$NUMBANOS<-log(tr$NUMBANOS+1)\n    tr$SUPPARCELA<-log(tr$SUPPARCELA+2)\n    tr$SUPCONST<-log(tr$SUPCONST)\n    tr$CCBU<-log(tr$CCBU)\n    tr$DEPRECIAVV<-log(tr$DEPRECIAVV+1)\n    \n    ### calculamos las cotas\n    \n    Obj=objetivo\n    obj.com<-Obj\n    \n    #variabs<-Obj[which(names(Obj)%in%names(C0))]\n    #cotas=(variabs/(1000*r))^2\n    #C=sum(cotas*C0)\n    #L=log(1/C)\n    \n    ### calculo distancias y obtencion testigos  \n    \n    obj<-subset(obj.com,select=c(\"NUMBANOS\",\"SUPPARCELA\",\"SUPCONST\",\"CCBU\",\"DEPRECIAVV\"))\n    obj$NUMBANOS<-log(obj$NUMBANOS+1)\n    obj$SUPPARCELA<-log(obj$SUPPARCELA+1)\n    obj$SUPCONST<-log(obj$SUPCONST)\n    obj$CCBU<-log(obj$CCBU)\n    obj$DEPRECIAVV<-log(obj$DEPRECIAVV+1)\n    \n    names.obj=names(apply(obj,2,is.na))[apply(obj,2,is.na)==FALSE]\n    \n    obj=obj[, colSums(is.na(obj)) != nrow(obj)]\n    \n    ####### EN PRUEBAS ##########\n    obj=as.data.frame(obj)\n    names(obj)=names.obj\n    #############################\n    \n    \n    tr<-subset(tr,select=c(names(obj)[names(obj)%in%c(\"NUMBANOS\",\"SUPPARCELA\",\"SUPCONST\",\"CCBU\",\"DEPRECIAVV\")]))\n    \n    #### if(ncol(tr)==0){....} if(ncol(tr)>0){\n    \n    \n    #### rangos \n    R=apply(tr,2,\"range\")\n    \n    r=c()\n    for(k in 1:ncol(R)){\n      if(R[1,k]==R[2,k]){r[k]=1}\n      else{r[k]=R[2,k]-R[1,k]}\n    }\n    \n    \n    C0=subset(C0,select=names(tr))\n    \n    OBJ<-matrix(as.numeric(rep(obj,nrow(tr))),ncol=ncol(tr),byrow=TRUE)\n    names(OBJ)=names(tr)\n    dif=tr-OBJ\n    dif_r=sweep(dif, 2, r, \"/\")\n    dif_r2=dif_r^2\n    d<-sweep(dif_r2, 2, C0, \"*\")\n    dist<-rowSums(d)\n    \n    TR<-cbind(data2,dist)\n    \n    if(all(dist==mean(dist))){TR=data2[1:30,]}\n    \n    if(!all(dist==mean(dist))){\n      TR=TR[order(TR$dist),]\n      TR=TR[1:30,]\n    }\n    \n    Obj=Obj[,-c(1:4,13:14,16:18)]\n    Objetive=Obj[, colSums(is.na(Obj)) != nrow(Obj)]\n    \n    TR<-TR[,c(\"VUMERCADO\",names(Objetive))]\n    \n    set.seed(1)\n    tree<-tuneRF(TR[,-1],TR$VUMERCADO,stepFactor=1.5, improve=1e-5, ntree=500,doBest=TRUE,trace = FALSE,nodesize=round(0.01*nrow(TR)),plot=FALSE)\n    #error=mean(abs((tree$predicted-tree$y)/tree$y))\n    #error=ifelse(error<=0.05,1,ifelse(error>0.05 & error<=0.1,2,ifelse(error>0.1 & error<=0.15,3,ifelse(error>0.15 & error<=0.2,4,ifelse(error>0.2,5,NA)))))\n    pred.obj<-predict(tree,Objetive,predict.all=TRUE)\n    pred = list(aggregate = pred.obj$aggregate, individual = pred.obj$individual)#,error=error)\n    \n    return(pred)\n  }\n  \n  if(nrow(data)>=30 & all(data$idzona==data$idzonaRef)){\n    \n    objetivo=objetivo[,-c(1:4,13:14,16:18)]\n    objetivo=objetivo[, colSums(is.na(objetivo)) != nrow(objetivo)]\n    TR<-data[,c(\"VUMERCADO\",names(objetivo))]\n    set.seed(1)\n    tree<-tuneRF(TR[,-1],TR$VUMERCADO,stepFactor=1.5, improve=1e-5, ntree=500,doBest=TRUE,trace = FALSE,nodesize=round(0.01*nrow(TR)),plot=FALSE)\n    #error=mean(abs((tree$predicted-tree$y)/tree$y))\n    #error=ifelse(error<=0.05,1,ifelse(error>0.05 & error<=0.1,2,ifelse(error>0.1 & error<=0.15,3,ifelse(error>0.15 & error<=0.2,4,ifelse(error>0.2,5,NA)))))\n    pred.obj<-predict(tree,objetivo,predict.all=TRUE)\n    pred = list(aggregate = pred.obj$aggregate, individual = pred.obj$individual)#,error=error)\n    \n    return(pred)\n  }\n}",
    "created" : 1496746215416.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "237943219",
    "id" : "3B0C086F",
    "lastKnownWriteTime" : 1494917770,
    "last_content_update" : 1494917770,
    "path" : "C:/Users/TBG/Desktop/Modelo Innocv/Modelo web/R/Unifamiliar.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}