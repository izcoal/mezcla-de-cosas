{
    "collab_server" : "",
    "contents" : "Tasacion <- function(Directorio){\n  #Carga todas las funciones\n  sapply(list.files(pattern=\"[.]R$\", path=\"R/\", full.names=TRUE), source)\n  ListaDeDatos <- LeerArchivos(Directorio)\n  \n  TipologiaEstimacion <- ListaDeDatos$Estimacion[,\"Tipologia\"]\n  \n  Variables <- SeleccionarVariables(ListaDeDatos$Muestra, TipologiaEstimacion)\n  VariablesCaso <- SeleccionarVariables(ListaDeDatos$Estimacion, TipologiaEstimacion)\n  \n  #Datos Auxiliares\n  OtrasVariablesCaso <- SeleccionarOtrasVariables(ListaDeDatos$Estimacion)\n  OtrasVariables <- SeleccionarOtrasVariables(ListaDeDatos$Muestra)\n  \n  #Hay que poner este valor si es 1, 2 รณ 7\n  ElementosConValor7 <- sum(OtrasVariables[,\"DatosDeLaPlanta\"] == 7)\n  DatosASumar <- OtrasVariables[,\"DatosDeLaPlanta\"] == 7\n  TotalDePlantaParaElementosConValor7 <- sum(OtrasVariables[DatosASumar,\"NumeroDePlanta\"])\n  \n  OtrasVariablesCaso[is.na(OtrasVariablesCaso[,\"NumeroDePlanta\"]), \"NumeroDePlanta\"] <- TotalDePlantaParaElementosConValor7/ElementosConValor7\n  if(OtrasVariablesCaso[,\"DatosDeLaPlanta\"] == 0) OtrasVariablesCaso[,\"DatosDeLaPlanta\"] <-  5\n  \n\n  VariablesMuestraTransformadas <- TransformarVariables(Variables)\n  VariablesCasoTransformadas <- TransformarCaso(VariablesCaso, VariablesMuestraTransformadas)\n  \n  Coeficientes <- ObtieneDatosDelModelo(ListaDeDatos$Parametros, TipologiaEstimacion)\n\n  ValoresMinimos <- t(as.matrix(apply(rbind(VariablesMuestraTransformadas, VariablesCasoTransformadas), 2, min)))\n  ValoresMaximos <- t(as.matrix(apply(rbind(VariablesMuestraTransformadas, VariablesCasoTransformadas), 2, max)))\n  Rangos <- ValoresMaximos - ValoresMinimos\n  rownames(Rangos) <- \"1\"\n  B_Unifamiliar <- subset(ListaDeDatos$Parametros, Tipologia==\"Unifamiliar\" & Tipo==\"b\", select = c(4:9))\n  \n  \n  CotaDistancia <- (VariablesCasoTransformadas / (1000 * Rangos))^2\n  # \n  DatoCoeficiente <- sum(CotaDistancia[,2:6] * Coeficientes[,1:5])\n  \n  #Distancia\n  MatrizDatosCaso <- VariablesCasoTransformadas[rep(row.names(VariablesCasoTransformadas), nrow(Variables)), 1:6]\n  MatrizRangos <- Rangos[rep(row.names(Rangos), nrow(Variables)), 1:6]\n  MatrizCoeficientes <- Coeficientes[rep(row.names(Coeficientes), nrow(Variables)), 1:6]\n  if (TipologiaEstimacion==1){\n    Matriz_b <- subset(ListaDeDatos$Parametros, Tipologia==\"Unifamiliar\" & Tipo==\"b\", select = c(4:9))\n  } else {\n    Matriz_b <- subset(ListaDeDatos$Parametros, Tipologia==\"Plurifamiliar\" & Tipo==\"b\", select = c(4:9))      \n  }\n  Matriz_b <- Matriz_b[rep(row.names(Matriz_b), nrow(Variables)), 1:6]\n  \n  Distancia <- as.matrix(rowSums(((VariablesMuestraTransformadas[,2:6] - MatrizDatosCaso[,2:6])/MatrizRangos[,2:6])^2 * MatrizCoeficientes[,1:5]),na.rm = TRUE)\n  colnames(Distancia) <- \"Distancia\"\n  \n  Ly_Transformada <- as.matrix(VariablesMuestraTransformadas[,\"ValorUnitarioDeMercado\"] + rowSums((MatrizDatosCaso[,2:6] - VariablesMuestraTransformadas[,2:6])*Matriz_b[,1:5]),na.rm = TRUE)\n  colnames(Ly_Transformada) <- \"Ly_Transformada\"\n  \n  jerarquia <- as.matrix(order(Distancia))\n  DistanciaOrdenada <- as.matrix(Distancia[order(Distancia)])\n  rownames(DistanciaOrdenada) <- jerarquia\n  \n  p_original <- as.matrix(ifelse(Distancia<DatoCoeficiente, 1, abs(log(Distancia))/log(1/DatoCoeficiente)))\n  colnames(p_original) <- \"p_original\"\n  \n  Tipologia <- as.matrix(ListaDeDatos$Muestra[,\"Tipologia\"])\n  colnames(Tipologia) <- \"Tipologia\"\n  VariablesMuestraTransformadas <- cbind(VariablesMuestraTransformadas, Distancia, Ly_Transformada, p_original, Tipologia)\n  \n  MuestraOrdenada <- head(VariablesMuestraTransformadas[order(VariablesMuestraTransformadas[,\"Distancia\"]),], 30)\n  Total_p_original <- sum(MuestraOrdenada[,\"p_original\"])\n  \n  Pesos <- as.matrix(MuestraOrdenada[,\"p_original\"]*30/Total_p_original)\n  colnames(Pesos) <- \"Pesos\"\n  \n  MuestraOrdenada <- cbind(MuestraOrdenada, Pesos)\n  \n  OtrasVariablesCaso <- ObtieneOtrasVariables(OtrasVariablesCaso)\n  \n  OtrasVariables <- ObtieneOtrasVariables(OtrasVariables)\n  \n  CorreccionOtrasVariables <- CorreccionPorOtrasVariables(OtrasVariables, OtrasVariablesCaso, ListaDeDatos$Parametros)\n  \n  Correccion <- CorreccionOtrasVariables[rownames(MuestraOrdenada)]\n  if (TipologiaEstimacion==1){\n    wCorregido <- MuestraOrdenada[,\"Ly_Transformada\"]\n  } else {\n    wCorregido <- log(Correccion*exp(MuestraOrdenada[,\"Ly_Transformada\"]))\n  }\n  PesosXwCorregido <- MuestraOrdenada[,\"Pesos\"]*wCorregido\n  PesosXwCorregidoCuadrado <-  MuestraOrdenada[,\"Pesos\"]*wCorregido^2\n  SumaPesos <- cumsum(MuestraOrdenada[,\"Pesos\"])\n  SumaPesosXwCorregido <- cumsum(PesosXwCorregido)\n  Estimacion <- SumaPesosXwCorregido/SumaPesos\n  SumaPesosXwCorregidoCuadrado <- cumsum(PesosXwCorregidoCuadrado)\n  SumaPesosXwCorregidoCuadradoEntreSumaPesos <- SumaPesosXwCorregidoCuadrado/SumaPesos\n  s <- sqrt(SumaPesos*round(SumaPesosXwCorregidoCuadradoEntreSumaPesos-Estimacion^2,8)/(SumaPesos-1))\n  rndSumaPesosMenos1 <- round(SumaPesos-1)\n  rndSumaPesosMenos1 <- ifelse(rndSumaPesosMenos1 == 0, 1, rndSumaPesosMenos1)\n  t <- ifelse(rndSumaPesosMenos1>30, rndSumaPesosMenos1,qt(.975, 1:30)[rndSumaPesosMenos1])\n  sxt <- s*t\n  MuestraOrdenada <- cbind(MuestraOrdenada, Correccion, wCorregido, PesosXwCorregido, PesosXwCorregidoCuadrado, SumaPesos, SumaPesosXwCorregido, \n                           Estimacion, SumaPesosXwCorregidoCuadrado, SumaPesosXwCorregidoCuadradoEntreSumaPesos, s, rndSumaPesosMenos1, t, sxt)\n  \n  \n  MuestraOrdenadaFiltrada <- MuestraOrdenada[6:30,]\n  ValorDistribucionT <- ifelse(min(MuestraOrdenadaFiltrada[,\"sxt\"])>=log(1.05), min(MuestraOrdenadaFiltrada[,\"sxt\"]), MuestraOrdenadaFiltrada[,\"sxt\"][25])\n  \n  Seleccionados <- head(MuestraOrdenada, 5)\n  MuestraDeCorte <- subset(MuestraOrdenadaFiltrada, MuestraOrdenadaFiltrada[,\"sxt\"] == ValorDistribucionT)\n  MuestrasAdicionales <- subset(MuestraOrdenadaFiltrada, MuestraOrdenadaFiltrada[,\"Distancia\"] <= MuestraDeCorte[,\"Distancia\"])\n  Seleccionados <- rbind(Seleccionados, MuestrasAdicionales)\n  Estimacion <- CalcularTasacion(Seleccionados)\n  CalidadEstimacion <- CalcularCalidadTasacion(ListaDeDatos$Estimacion, MuestraOrdenada, Seleccionados, Coeficientes, VariablesCasoTransformadas)\n  \n  GrabarTasacion(Directorio, c(Estimacion, CalidadEstimacion))\n}",
    "created" : 1496747185205.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "990603035",
    "id" : "DCD84D8D",
    "lastKnownWriteTime" : 1471515223,
    "last_content_update" : 1471515223,
    "path" : "C:/Users/TBG/Desktop/stima2/stima-r - copia/stima-r/Tasacion/R/Tasacion.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}